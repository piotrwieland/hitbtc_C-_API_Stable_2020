/* 
 * HitBTC API
 *
 * Create API keys in your profile https://hitbtc.com/settings/api-keys and use public API key as username and secret as password to authorize. 
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing PublicApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PublicApiTests
    {
        private PublicApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PublicApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PublicApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PublicApi
            //Assert.IsInstanceOfType(typeof(PublicApi), instance, "instance is a PublicApi");
        }

        
        /// <summary>
        /// Test PublicCandlesSymbolGet
        /// </summary>
        [Test]
        public void PublicCandlesSymbolGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string symbol = null;
            //int? limit = null;
            //string period = null;
            //var response = instance.PublicCandlesSymbolGet(symbol, limit, period);
            //Assert.IsInstanceOf<List<Candle>> (response, "response is List<Candle>");
        }
        
        /// <summary>
        /// Test PublicCurrencyCurrencyGet
        /// </summary>
        [Test]
        public void PublicCurrencyCurrencyGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string currency = null;
            //var response = instance.PublicCurrencyCurrencyGet(currency);
            //Assert.IsInstanceOf<Currency> (response, "response is Currency");
        }
        
        /// <summary>
        /// Test PublicCurrencyGet
        /// </summary>
        [Test]
        public void PublicCurrencyGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.PublicCurrencyGet();
            //Assert.IsInstanceOf<List<Currency>> (response, "response is List<Currency>");
        }
        
        /// <summary>
        /// Test PublicOrderbookSymbolGet
        /// </summary>
        [Test]
        public void PublicOrderbookSymbolGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string symbol = null;
            //int? limit = null;
            //var response = instance.PublicOrderbookSymbolGet(symbol, limit);
            //Assert.IsInstanceOf<Orderbook> (response, "response is Orderbook");
        }
        
        /// <summary>
        /// Test PublicSymbolGet
        /// </summary>
        [Test]
        public void PublicSymbolGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.PublicSymbolGet();
            //Assert.IsInstanceOf<List<Symbol>> (response, "response is List<Symbol>");
        }
        
        /// <summary>
        /// Test PublicSymbolSymbolGet
        /// </summary>
        [Test]
        public void PublicSymbolSymbolGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string symbol = null;
            //var response = instance.PublicSymbolSymbolGet(symbol);
            //Assert.IsInstanceOf<Symbol> (response, "response is Symbol");
        }
        
        /// <summary>
        /// Test PublicTickerGet
        /// </summary>
        [Test]
        public void PublicTickerGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.PublicTickerGet();
            //Assert.IsInstanceOf<List<Ticker>> (response, "response is List<Ticker>");
        }
        
        /// <summary>
        /// Test PublicTickerSymbolGet
        /// </summary>
        [Test]
        public void PublicTickerSymbolGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string symbol = null;
            //var response = instance.PublicTickerSymbolGet(symbol);
            //Assert.IsInstanceOf<Ticker> (response, "response is Ticker");
        }
        
        /// <summary>
        /// Test PublicTradesSymbolGet
        /// </summary>
        [Test]
        public void PublicTradesSymbolGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string symbol = null;
            //string sort = null;
            //string by = null;
            //string from = null;
            //string till = null;
            //int? limit = null;
            //int? offset = null;
            //var response = instance.PublicTradesSymbolGet(symbol, sort, by, from, till, limit, offset);
            //Assert.IsInstanceOf<List<PublicTrade>> (response, "response is List<PublicTrade>");
        }
        
    }

}
