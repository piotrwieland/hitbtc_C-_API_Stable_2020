/* 
 * HitBTC API
 *
 * Create API keys in your profile https://hitbtc.com/settings/api-keys and use public API key as username and secret as password to authorize. 
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITradingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <returns>Order</returns>
        Order OrderClientOrderIdDelete (string clientOrderId);

        /// <summary>
        /// Cancel order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> OrderClientOrderIdDeleteWithHttpInfo (string clientOrderId);
        /// <summary>
        /// Get a single order by clientOrderId
        /// </summary>
        /// <remarks>
        /// The Ticker endpoint returns last 24H information about symbols. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <param name="wait">Long polling wait timeout in milliseconds. Max 60000. (optional)</param>
        /// <returns>Order</returns>
        Order OrderClientOrderIdGet (string clientOrderId, int? wait = null);

        /// <summary>
        /// Get a single order by clientOrderId
        /// </summary>
        /// <remarks>
        /// The Ticker endpoint returns last 24H information about symbols. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <param name="wait">Long polling wait timeout in milliseconds. Max 60000. (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> OrderClientOrderIdGetWithHttpInfo (string clientOrderId, int? wait = null);
        /// <summary>
        /// Cancel Replace order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <param name="quantity"></param>
        /// <param name="requestClientId"></param>
        /// <param name="price"> (optional)</param>
        /// <returns>Order</returns>
        Order OrderClientOrderIdPatch (string clientOrderId, string quantity, string requestClientId, string price = null);

        /// <summary>
        /// Cancel Replace order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <param name="quantity"></param>
        /// <param name="requestClientId"></param>
        /// <param name="price"> (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> OrderClientOrderIdPatchWithHttpInfo (string clientOrderId, string quantity, string requestClientId, string price = null);
        /// <summary>
        /// Create new order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <param name="symbol"></param>
        /// <param name="side"></param>
        /// <param name="timeInForce"></param>
        /// <param name="quantity"></param>
        /// <param name="type"> (optional, default to limit)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="stopPrice"> (optional)</param>
        /// <param name="expireTime"> (optional)</param>
        /// <param name="strictValidate">Strict validate amount and price precision without rounding (optional, default to false)</param>
        /// <returns>Order</returns>
        Order OrderClientOrderIdPut (string clientOrderId, string symbol, string side, string timeInForce, string quantity, string type = null, string price = null, string stopPrice = null, DateTime? expireTime = null, bool? strictValidate = null);

        /// <summary>
        /// Create new order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <param name="symbol"></param>
        /// <param name="side"></param>
        /// <param name="timeInForce"></param>
        /// <param name="quantity"></param>
        /// <param name="type"> (optional, default to limit)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="stopPrice"> (optional)</param>
        /// <param name="expireTime"> (optional)</param>
        /// <param name="strictValidate">Strict validate amount and price precision without rounding (optional, default to false)</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> OrderClientOrderIdPutWithHttpInfo (string clientOrderId, string symbol, string side, string timeInForce, string quantity, string type = null, string price = null, string stopPrice = null, DateTime? expireTime = null, bool? strictValidate = null);
        /// <summary>
        /// Cancel all open orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <returns>List&lt;Order&gt;</returns>
        List<Order> OrderDelete (string symbol = null);

        /// <summary>
        /// Cancel all open orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        ApiResponse<List<Order>> OrderDeleteWithHttpInfo (string symbol = null);
        /// <summary>
        /// List your current open orders
        /// </summary>
        /// <remarks>
        /// List of your currently open orders.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <returns>List&lt;Order&gt;</returns>
        List<Order> OrderGet (string symbol = null);

        /// <summary>
        /// List your current open orders
        /// </summary>
        /// <remarks>
        /// List of your currently open orders.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        ApiResponse<List<Order>> OrderGetWithHttpInfo (string symbol = null);
        /// <summary>
        /// Create new order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_event">Open order request (optional)</param>
        /// <returns>Order</returns>
        Order OrderPost (OrderCommand _event = null);

        /// <summary>
        /// Create new order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_event">Open order request (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> OrderPostWithHttpInfo (OrderCommand _event = null);
        /// <summary>
        /// Get trading balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Balance&gt;</returns>
        List<Balance> TradingBalanceGet ();

        /// <summary>
        /// Get trading balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Balance&gt;</returns>
        ApiResponse<List<Balance>> TradingBalanceGetWithHttpInfo ();
        /// <summary>
        /// Get trading fee rate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <returns>TradingFee</returns>
        TradingFee TradingFeeSymbolGet (string symbol);

        /// <summary>
        /// Get trading fee rate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <returns>ApiResponse of TradingFee</returns>
        ApiResponse<TradingFee> TradingFeeSymbolGetWithHttpInfo (string symbol);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancel order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> OrderClientOrderIdDeleteAsync (string clientOrderId);

        /// <summary>
        /// Cancel order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> OrderClientOrderIdDeleteAsyncWithHttpInfo (string clientOrderId);
        /// <summary>
        /// Get a single order by clientOrderId
        /// </summary>
        /// <remarks>
        /// The Ticker endpoint returns last 24H information about symbols. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <param name="wait">Long polling wait timeout in milliseconds. Max 60000. (optional)</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> OrderClientOrderIdGetAsync (string clientOrderId, int? wait = null);

        /// <summary>
        /// Get a single order by clientOrderId
        /// </summary>
        /// <remarks>
        /// The Ticker endpoint returns last 24H information about symbols. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <param name="wait">Long polling wait timeout in milliseconds. Max 60000. (optional)</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> OrderClientOrderIdGetAsyncWithHttpInfo (string clientOrderId, int? wait = null);
        /// <summary>
        /// Cancel Replace order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <param name="quantity"></param>
        /// <param name="requestClientId"></param>
        /// <param name="price"> (optional)</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> OrderClientOrderIdPatchAsync (string clientOrderId, string quantity, string requestClientId, string price = null);

        /// <summary>
        /// Cancel Replace order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <param name="quantity"></param>
        /// <param name="requestClientId"></param>
        /// <param name="price"> (optional)</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> OrderClientOrderIdPatchAsyncWithHttpInfo (string clientOrderId, string quantity, string requestClientId, string price = null);
        /// <summary>
        /// Create new order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <param name="symbol"></param>
        /// <param name="side"></param>
        /// <param name="timeInForce"></param>
        /// <param name="quantity"></param>
        /// <param name="type"> (optional, default to limit)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="stopPrice"> (optional)</param>
        /// <param name="expireTime"> (optional)</param>
        /// <param name="strictValidate">Strict validate amount and price precision without rounding (optional, default to false)</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> OrderClientOrderIdPutAsync (string clientOrderId, string symbol, string side, string timeInForce, string quantity, string type = null, string price = null, string stopPrice = null, DateTime? expireTime = null, bool? strictValidate = null);

        /// <summary>
        /// Create new order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <param name="symbol"></param>
        /// <param name="side"></param>
        /// <param name="timeInForce"></param>
        /// <param name="quantity"></param>
        /// <param name="type"> (optional, default to limit)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="stopPrice"> (optional)</param>
        /// <param name="expireTime"> (optional)</param>
        /// <param name="strictValidate">Strict validate amount and price precision without rounding (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> OrderClientOrderIdPutAsyncWithHttpInfo (string clientOrderId, string symbol, string side, string timeInForce, string quantity, string type = null, string price = null, string stopPrice = null, DateTime? expireTime = null, bool? strictValidate = null);
        /// <summary>
        /// Cancel all open orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        System.Threading.Tasks.Task<List<Order>> OrderDeleteAsync (string symbol = null);

        /// <summary>
        /// Cancel all open orders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Order>>> OrderDeleteAsyncWithHttpInfo (string symbol = null);
        /// <summary>
        /// List your current open orders
        /// </summary>
        /// <remarks>
        /// List of your currently open orders.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        System.Threading.Tasks.Task<List<Order>> OrderGetAsync (string symbol = null);

        /// <summary>
        /// List your current open orders
        /// </summary>
        /// <remarks>
        /// List of your currently open orders.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Order>>> OrderGetAsyncWithHttpInfo (string symbol = null);
        /// <summary>
        /// Create new order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_event">Open order request (optional)</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> OrderPostAsync (OrderCommand _event = null);

        /// <summary>
        /// Create new order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_event">Open order request (optional)</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> OrderPostAsyncWithHttpInfo (OrderCommand _event = null);
        /// <summary>
        /// Get trading balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Balance&gt;</returns>
        System.Threading.Tasks.Task<List<Balance>> TradingBalanceGetAsync ();

        /// <summary>
        /// Get trading balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Balance&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Balance>>> TradingBalanceGetAsyncWithHttpInfo ();
        /// <summary>
        /// Get trading fee rate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <returns>Task of TradingFee</returns>
        System.Threading.Tasks.Task<TradingFee> TradingFeeSymbolGetAsync (string symbol);

        /// <summary>
        /// Get trading fee rate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <returns>Task of ApiResponse (TradingFee)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradingFee>> TradingFeeSymbolGetAsyncWithHttpInfo (string symbol);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TradingApi : ITradingApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TradingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TradingApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TradingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TradingApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancel order 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <returns>Order</returns>
        public Order OrderClientOrderIdDelete (string clientOrderId)
        {
             ApiResponse<Order> localVarResponse = OrderClientOrderIdDeleteWithHttpInfo(clientOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel order 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <returns>ApiResponse of Order</returns>
        public ApiResponse< Order > OrderClientOrderIdDeleteWithHttpInfo (string clientOrderId)
        {
            // verify the required parameter 'clientOrderId' is set
            if (clientOrderId == null)
                throw new ApiException(400, "Missing required parameter 'clientOrderId' when calling TradingApi->OrderClientOrderIdDelete");

            var localVarPath = "/order/{clientOrderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientOrderId != null) localVarPathParams.Add("clientOrderId", this.Configuration.ApiClient.ParameterToString(clientOrderId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderClientOrderIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }

        /// <summary>
        /// Cancel order 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> OrderClientOrderIdDeleteAsync (string clientOrderId)
        {
             ApiResponse<Order> localVarResponse = await OrderClientOrderIdDeleteAsyncWithHttpInfo(clientOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel order 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Order>> OrderClientOrderIdDeleteAsyncWithHttpInfo (string clientOrderId)
        {
            // verify the required parameter 'clientOrderId' is set
            if (clientOrderId == null)
                throw new ApiException(400, "Missing required parameter 'clientOrderId' when calling TradingApi->OrderClientOrderIdDelete");

            var localVarPath = "/order/{clientOrderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientOrderId != null) localVarPathParams.Add("clientOrderId", this.Configuration.ApiClient.ParameterToString(clientOrderId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderClientOrderIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }

        /// <summary>
        /// Get a single order by clientOrderId The Ticker endpoint returns last 24H information about symbols. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <param name="wait">Long polling wait timeout in milliseconds. Max 60000. (optional)</param>
        /// <returns>Order</returns>
        public Order OrderClientOrderIdGet (string clientOrderId, int? wait = null)
        {
             ApiResponse<Order> localVarResponse = OrderClientOrderIdGetWithHttpInfo(clientOrderId, wait);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single order by clientOrderId The Ticker endpoint returns last 24H information about symbols. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <param name="wait">Long polling wait timeout in milliseconds. Max 60000. (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        public ApiResponse< Order > OrderClientOrderIdGetWithHttpInfo (string clientOrderId, int? wait = null)
        {
            // verify the required parameter 'clientOrderId' is set
            if (clientOrderId == null)
                throw new ApiException(400, "Missing required parameter 'clientOrderId' when calling TradingApi->OrderClientOrderIdGet");

            var localVarPath = "/order/{clientOrderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientOrderId != null) localVarPathParams.Add("clientOrderId", this.Configuration.ApiClient.ParameterToString(clientOrderId)); // path parameter
            if (wait != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wait", wait)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderClientOrderIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }

        /// <summary>
        /// Get a single order by clientOrderId The Ticker endpoint returns last 24H information about symbols. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <param name="wait">Long polling wait timeout in milliseconds. Max 60000. (optional)</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> OrderClientOrderIdGetAsync (string clientOrderId, int? wait = null)
        {
             ApiResponse<Order> localVarResponse = await OrderClientOrderIdGetAsyncWithHttpInfo(clientOrderId, wait);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single order by clientOrderId The Ticker endpoint returns last 24H information about symbols. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <param name="wait">Long polling wait timeout in milliseconds. Max 60000. (optional)</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Order>> OrderClientOrderIdGetAsyncWithHttpInfo (string clientOrderId, int? wait = null)
        {
            // verify the required parameter 'clientOrderId' is set
            if (clientOrderId == null)
                throw new ApiException(400, "Missing required parameter 'clientOrderId' when calling TradingApi->OrderClientOrderIdGet");

            var localVarPath = "/order/{clientOrderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientOrderId != null) localVarPathParams.Add("clientOrderId", this.Configuration.ApiClient.ParameterToString(clientOrderId)); // path parameter
            if (wait != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wait", wait)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderClientOrderIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }

        /// <summary>
        /// Cancel Replace order 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <param name="quantity"></param>
        /// <param name="requestClientId"></param>
        /// <param name="price"> (optional)</param>
        /// <returns>Order</returns>
        public Order OrderClientOrderIdPatch (string clientOrderId, string quantity, string requestClientId, string price = null)
        {
             ApiResponse<Order> localVarResponse = OrderClientOrderIdPatchWithHttpInfo(clientOrderId, quantity, requestClientId, price);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Replace order 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <param name="quantity"></param>
        /// <param name="requestClientId"></param>
        /// <param name="price"> (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        public ApiResponse< Order > OrderClientOrderIdPatchWithHttpInfo (string clientOrderId, string quantity, string requestClientId, string price = null)
        {
            // verify the required parameter 'clientOrderId' is set
            if (clientOrderId == null)
                throw new ApiException(400, "Missing required parameter 'clientOrderId' when calling TradingApi->OrderClientOrderIdPatch");
            // verify the required parameter 'quantity' is set
            if (quantity == null)
                throw new ApiException(400, "Missing required parameter 'quantity' when calling TradingApi->OrderClientOrderIdPatch");
            // verify the required parameter 'requestClientId' is set
            if (requestClientId == null)
                throw new ApiException(400, "Missing required parameter 'requestClientId' when calling TradingApi->OrderClientOrderIdPatch");

            var localVarPath = "/order/{clientOrderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientOrderId != null) localVarPathParams.Add("clientOrderId", this.Configuration.ApiClient.ParameterToString(clientOrderId)); // path parameter
            if (quantity != null) localVarFormParams.Add("quantity", this.Configuration.ApiClient.ParameterToString(quantity)); // form parameter
            if (price != null) localVarFormParams.Add("price", this.Configuration.ApiClient.ParameterToString(price)); // form parameter
            if (requestClientId != null) localVarFormParams.Add("requestClientId", this.Configuration.ApiClient.ParameterToString(requestClientId)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderClientOrderIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }

        /// <summary>
        /// Cancel Replace order 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <param name="quantity"></param>
        /// <param name="requestClientId"></param>
        /// <param name="price"> (optional)</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> OrderClientOrderIdPatchAsync (string clientOrderId, string quantity, string requestClientId, string price = null)
        {
             ApiResponse<Order> localVarResponse = await OrderClientOrderIdPatchAsyncWithHttpInfo(clientOrderId, quantity, requestClientId, price);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel Replace order 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <param name="quantity"></param>
        /// <param name="requestClientId"></param>
        /// <param name="price"> (optional)</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Order>> OrderClientOrderIdPatchAsyncWithHttpInfo (string clientOrderId, string quantity, string requestClientId, string price = null)
        {
            // verify the required parameter 'clientOrderId' is set
            if (clientOrderId == null)
                throw new ApiException(400, "Missing required parameter 'clientOrderId' when calling TradingApi->OrderClientOrderIdPatch");
            // verify the required parameter 'quantity' is set
            if (quantity == null)
                throw new ApiException(400, "Missing required parameter 'quantity' when calling TradingApi->OrderClientOrderIdPatch");
            // verify the required parameter 'requestClientId' is set
            if (requestClientId == null)
                throw new ApiException(400, "Missing required parameter 'requestClientId' when calling TradingApi->OrderClientOrderIdPatch");

            var localVarPath = "/order/{clientOrderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientOrderId != null) localVarPathParams.Add("clientOrderId", this.Configuration.ApiClient.ParameterToString(clientOrderId)); // path parameter
            if (quantity != null) localVarFormParams.Add("quantity", this.Configuration.ApiClient.ParameterToString(quantity)); // form parameter
            if (price != null) localVarFormParams.Add("price", this.Configuration.ApiClient.ParameterToString(price)); // form parameter
            if (requestClientId != null) localVarFormParams.Add("requestClientId", this.Configuration.ApiClient.ParameterToString(requestClientId)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderClientOrderIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }

        /// <summary>
        /// Create new order 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <param name="symbol"></param>
        /// <param name="side"></param>
        /// <param name="timeInForce"></param>
        /// <param name="quantity"></param>
        /// <param name="type"> (optional, default to limit)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="stopPrice"> (optional)</param>
        /// <param name="expireTime"> (optional)</param>
        /// <param name="strictValidate">Strict validate amount and price precision without rounding (optional, default to false)</param>
        /// <returns>Order</returns>
        public Order OrderClientOrderIdPut (string clientOrderId, string symbol, string side, string timeInForce, string quantity, string type = null, string price = null, string stopPrice = null, DateTime? expireTime = null, bool? strictValidate = null)
        {
             ApiResponse<Order> localVarResponse = OrderClientOrderIdPutWithHttpInfo(clientOrderId, symbol, side, timeInForce, quantity, type, price, stopPrice, expireTime, strictValidate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new order 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <param name="symbol"></param>
        /// <param name="side"></param>
        /// <param name="timeInForce"></param>
        /// <param name="quantity"></param>
        /// <param name="type"> (optional, default to limit)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="stopPrice"> (optional)</param>
        /// <param name="expireTime"> (optional)</param>
        /// <param name="strictValidate">Strict validate amount and price precision without rounding (optional, default to false)</param>
        /// <returns>ApiResponse of Order</returns>
        public ApiResponse< Order > OrderClientOrderIdPutWithHttpInfo (string clientOrderId, string symbol, string side, string timeInForce, string quantity, string type = null, string price = null, string stopPrice = null, DateTime? expireTime = null, bool? strictValidate = null)
        {
            // verify the required parameter 'clientOrderId' is set
            if (clientOrderId == null)
                throw new ApiException(400, "Missing required parameter 'clientOrderId' when calling TradingApi->OrderClientOrderIdPut");
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling TradingApi->OrderClientOrderIdPut");
            // verify the required parameter 'side' is set
            if (side == null)
                throw new ApiException(400, "Missing required parameter 'side' when calling TradingApi->OrderClientOrderIdPut");
            // verify the required parameter 'timeInForce' is set
            if (timeInForce == null)
                throw new ApiException(400, "Missing required parameter 'timeInForce' when calling TradingApi->OrderClientOrderIdPut");
            // verify the required parameter 'quantity' is set
            if (quantity == null)
                throw new ApiException(400, "Missing required parameter 'quantity' when calling TradingApi->OrderClientOrderIdPut");

            var localVarPath = "/order/{clientOrderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientOrderId != null) localVarPathParams.Add("clientOrderId", this.Configuration.ApiClient.ParameterToString(clientOrderId)); // path parameter
            if (symbol != null) localVarFormParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // form parameter
            if (side != null) localVarFormParams.Add("side", this.Configuration.ApiClient.ParameterToString(side)); // form parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (timeInForce != null) localVarFormParams.Add("timeInForce", this.Configuration.ApiClient.ParameterToString(timeInForce)); // form parameter
            if (quantity != null) localVarFormParams.Add("quantity", this.Configuration.ApiClient.ParameterToString(quantity)); // form parameter
            if (price != null) localVarFormParams.Add("price", this.Configuration.ApiClient.ParameterToString(price)); // form parameter
            if (stopPrice != null) localVarFormParams.Add("stopPrice", this.Configuration.ApiClient.ParameterToString(stopPrice)); // form parameter
            if (expireTime != null) localVarFormParams.Add("expireTime", this.Configuration.ApiClient.ParameterToString(expireTime)); // form parameter
            if (strictValidate != null) localVarFormParams.Add("strictValidate", this.Configuration.ApiClient.ParameterToString(strictValidate)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderClientOrderIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }

        /// <summary>
        /// Create new order 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <param name="symbol"></param>
        /// <param name="side"></param>
        /// <param name="timeInForce"></param>
        /// <param name="quantity"></param>
        /// <param name="type"> (optional, default to limit)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="stopPrice"> (optional)</param>
        /// <param name="expireTime"> (optional)</param>
        /// <param name="strictValidate">Strict validate amount and price precision without rounding (optional, default to false)</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> OrderClientOrderIdPutAsync (string clientOrderId, string symbol, string side, string timeInForce, string quantity, string type = null, string price = null, string stopPrice = null, DateTime? expireTime = null, bool? strictValidate = null)
        {
             ApiResponse<Order> localVarResponse = await OrderClientOrderIdPutAsyncWithHttpInfo(clientOrderId, symbol, side, timeInForce, quantity, type, price, stopPrice, expireTime, strictValidate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new order 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId"></param>
        /// <param name="symbol"></param>
        /// <param name="side"></param>
        /// <param name="timeInForce"></param>
        /// <param name="quantity"></param>
        /// <param name="type"> (optional, default to limit)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="stopPrice"> (optional)</param>
        /// <param name="expireTime"> (optional)</param>
        /// <param name="strictValidate">Strict validate amount and price precision without rounding (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Order>> OrderClientOrderIdPutAsyncWithHttpInfo (string clientOrderId, string symbol, string side, string timeInForce, string quantity, string type = null, string price = null, string stopPrice = null, DateTime? expireTime = null, bool? strictValidate = null)
        {
            // verify the required parameter 'clientOrderId' is set
            if (clientOrderId == null)
                throw new ApiException(400, "Missing required parameter 'clientOrderId' when calling TradingApi->OrderClientOrderIdPut");
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling TradingApi->OrderClientOrderIdPut");
            // verify the required parameter 'side' is set
            if (side == null)
                throw new ApiException(400, "Missing required parameter 'side' when calling TradingApi->OrderClientOrderIdPut");
            // verify the required parameter 'timeInForce' is set
            if (timeInForce == null)
                throw new ApiException(400, "Missing required parameter 'timeInForce' when calling TradingApi->OrderClientOrderIdPut");
            // verify the required parameter 'quantity' is set
            if (quantity == null)
                throw new ApiException(400, "Missing required parameter 'quantity' when calling TradingApi->OrderClientOrderIdPut");

            var localVarPath = "/order/{clientOrderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientOrderId != null) localVarPathParams.Add("clientOrderId", this.Configuration.ApiClient.ParameterToString(clientOrderId)); // path parameter
            if (symbol != null) localVarFormParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // form parameter
            if (side != null) localVarFormParams.Add("side", this.Configuration.ApiClient.ParameterToString(side)); // form parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (timeInForce != null) localVarFormParams.Add("timeInForce", this.Configuration.ApiClient.ParameterToString(timeInForce)); // form parameter
            if (quantity != null) localVarFormParams.Add("quantity", this.Configuration.ApiClient.ParameterToString(quantity)); // form parameter
            if (price != null) localVarFormParams.Add("price", this.Configuration.ApiClient.ParameterToString(price)); // form parameter
            if (stopPrice != null) localVarFormParams.Add("stopPrice", this.Configuration.ApiClient.ParameterToString(stopPrice)); // form parameter
            if (expireTime != null) localVarFormParams.Add("expireTime", this.Configuration.ApiClient.ParameterToString(expireTime)); // form parameter
            if (strictValidate != null) localVarFormParams.Add("strictValidate", this.Configuration.ApiClient.ParameterToString(strictValidate)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderClientOrderIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }

        /// <summary>
        /// Cancel all open orders 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <returns>List&lt;Order&gt;</returns>
        public List<Order> OrderDelete (string symbol = null)
        {
             ApiResponse<List<Order>> localVarResponse = OrderDeleteWithHttpInfo(symbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel all open orders 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        public ApiResponse< List<Order> > OrderDeleteWithHttpInfo (string symbol = null)
        {

            var localVarPath = "/order";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarFormParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Order>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Order>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Order>)));
        }

        /// <summary>
        /// Cancel all open orders 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        public async System.Threading.Tasks.Task<List<Order>> OrderDeleteAsync (string symbol = null)
        {
             ApiResponse<List<Order>> localVarResponse = await OrderDeleteAsyncWithHttpInfo(symbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel all open orders 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Order>>> OrderDeleteAsyncWithHttpInfo (string symbol = null)
        {

            var localVarPath = "/order";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarFormParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Order>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Order>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Order>)));
        }

        /// <summary>
        /// List your current open orders List of your currently open orders.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <returns>List&lt;Order&gt;</returns>
        public List<Order> OrderGet (string symbol = null)
        {
             ApiResponse<List<Order>> localVarResponse = OrderGetWithHttpInfo(symbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List your current open orders List of your currently open orders.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        public ApiResponse< List<Order> > OrderGetWithHttpInfo (string symbol = null)
        {

            var localVarPath = "/order";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Order>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Order>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Order>)));
        }

        /// <summary>
        /// List your current open orders List of your currently open orders.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        public async System.Threading.Tasks.Task<List<Order>> OrderGetAsync (string symbol = null)
        {
             ApiResponse<List<Order>> localVarResponse = await OrderGetAsyncWithHttpInfo(symbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List your current open orders List of your currently open orders.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Order>>> OrderGetAsyncWithHttpInfo (string symbol = null)
        {

            var localVarPath = "/order";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Order>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Order>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Order>)));
        }

        /// <summary>
        /// Create new order 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_event">Open order request (optional)</param>
        /// <returns>Order</returns>
        public Order OrderPost (OrderCommand _event = null)
        {
             ApiResponse<Order> localVarResponse = OrderPostWithHttpInfo(_event);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new order 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_event">Open order request (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        public ApiResponse< Order > OrderPostWithHttpInfo (OrderCommand _event = null)
        {

            var localVarPath = "/order";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_event != null && _event.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(_event); // http body (model) parameter
            }
            else
            {
                localVarPostBody = _event; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }

        /// <summary>
        /// Create new order 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_event">Open order request (optional)</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> OrderPostAsync (OrderCommand _event = null)
        {
             ApiResponse<Order> localVarResponse = await OrderPostAsyncWithHttpInfo(_event);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new order 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_event">Open order request (optional)</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Order>> OrderPostAsyncWithHttpInfo (OrderCommand _event = null)
        {

            var localVarPath = "/order";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_event != null && _event.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(_event); // http body (model) parameter
            }
            else
            {
                localVarPostBody = _event; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }

        /// <summary>
        /// Get trading balance 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Balance&gt;</returns>
        public List<Balance> TradingBalanceGet ()
        {
             ApiResponse<List<Balance>> localVarResponse = TradingBalanceGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get trading balance 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Balance&gt;</returns>
        public ApiResponse< List<Balance> > TradingBalanceGetWithHttpInfo ()
        {

            var localVarPath = "/trading/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TradingBalanceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Balance>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Balance>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Balance>)));
        }

        /// <summary>
        /// Get trading balance 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Balance&gt;</returns>
        public async System.Threading.Tasks.Task<List<Balance>> TradingBalanceGetAsync ()
        {
             ApiResponse<List<Balance>> localVarResponse = await TradingBalanceGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get trading balance 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Balance&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Balance>>> TradingBalanceGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/trading/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TradingBalanceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Balance>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Balance>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Balance>)));
        }

        /// <summary>
        /// Get trading fee rate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <returns>TradingFee</returns>
        public TradingFee TradingFeeSymbolGet (string symbol)
        {
             ApiResponse<TradingFee> localVarResponse = TradingFeeSymbolGetWithHttpInfo(symbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get trading fee rate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <returns>ApiResponse of TradingFee</returns>
        public ApiResponse< TradingFee > TradingFeeSymbolGetWithHttpInfo (string symbol)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling TradingApi->TradingFeeSymbolGet");

            var localVarPath = "/trading/fee/{symbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TradingFeeSymbolGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradingFee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TradingFee) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradingFee)));
        }

        /// <summary>
        /// Get trading fee rate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <returns>Task of TradingFee</returns>
        public async System.Threading.Tasks.Task<TradingFee> TradingFeeSymbolGetAsync (string symbol)
        {
             ApiResponse<TradingFee> localVarResponse = await TradingFeeSymbolGetAsyncWithHttpInfo(symbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get trading fee rate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <returns>Task of ApiResponse (TradingFee)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TradingFee>> TradingFeeSymbolGetAsyncWithHttpInfo (string symbol)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling TradingApi->TradingFeeSymbolGet");

            var localVarPath = "/trading/fee/{symbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TradingFeeSymbolGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TradingFee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TradingFee) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TradingFee)));
        }

    }
}
