/* 
 * HitBTC API
 *
 * Create API keys in your profile https://hitbtc.com/settings/api-keys and use public API key as username and secret as password to authorize. 
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get main acccount balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Balance&gt;</returns>
        List<Balance> AccountBalanceGet ();

        /// <summary>
        /// Get main acccount balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Balance&gt;</returns>
        ApiResponse<List<Balance>> AccountBalanceGetWithHttpInfo ();
        /// <summary>
        /// Get deposit crypro address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>Address</returns>
        Address AccountCryptoAddressCurrencyGet (string currency);

        /// <summary>
        /// Get deposit crypro address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>ApiResponse of Address</returns>
        ApiResponse<Address> AccountCryptoAddressCurrencyGetWithHttpInfo (string currency);
        /// <summary>
        /// Create new deposit crypro address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>Address</returns>
        Address AccountCryptoAddressCurrencyPost (string currency);

        /// <summary>
        /// Create new deposit crypro address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>ApiResponse of Address</returns>
        ApiResponse<Address> AccountCryptoAddressCurrencyPostWithHttpInfo (string currency);
        /// <summary>
        /// Rollback withdraw crypro
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>WithdrawConfirm</returns>
        WithdrawConfirm AccountCryptoWithdrawIdDelete (string id);

        /// <summary>
        /// Rollback withdraw crypro
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of WithdrawConfirm</returns>
        ApiResponse<WithdrawConfirm> AccountCryptoWithdrawIdDeleteWithHttpInfo (string id);
        /// <summary>
        /// Commit withdraw crypro
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>WithdrawConfirm</returns>
        WithdrawConfirm AccountCryptoWithdrawIdPut (string id);

        /// <summary>
        /// Commit withdraw crypro
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of WithdrawConfirm</returns>
        ApiResponse<WithdrawConfirm> AccountCryptoWithdrawIdPutWithHttpInfo (string id);
        /// <summary>
        /// Withdraw crypro
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="amount"></param>
        /// <param name="address"></param>
        /// <param name="paymentId"> (optional)</param>
        /// <param name="networkFee">Suggest preferred network fee. (optional)</param>
        /// <param name="includeFee">If enabled, then fee will be subtracted from amount. (optional, default to false)</param>
        /// <param name="autoCommit">If (optional, default to true)</param>
        /// <returns></returns>
        void AccountCryptoWithdrawPost (string currency, string amount, string address, string paymentId = null, string networkFee = null, bool? includeFee = null, bool? autoCommit = null);

        /// <summary>
        /// Withdraw crypro
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="amount"></param>
        /// <param name="address"></param>
        /// <param name="paymentId"> (optional)</param>
        /// <param name="networkFee">Suggest preferred network fee. (optional)</param>
        /// <param name="includeFee">If enabled, then fee will be subtracted from amount. (optional, default to false)</param>
        /// <param name="autoCommit">If (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AccountCryptoWithdrawPostWithHttpInfo (string currency, string amount, string address, string paymentId = null, string networkFee = null, bool? includeFee = null, bool? autoCommit = null);
        /// <summary>
        /// Get account transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <param name="sort">Sort direction (optional, default to DESC)</param>
        /// <param name="by">Filter field (optional, default to timestamp)</param>
        /// <param name="from">Datetime in iso format or timestamp in millisecond, or index. (optional)</param>
        /// <param name="till">Datetime in iso format or timestamp in millisecond, or index. (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;Transaction&gt;</returns>
        List<Transaction> AccountTransactionsGet (string currency = null, string sort = null, string by = null, string from = null, string till = null, int? limit = null, int? offset = null);

        /// <summary>
        /// Get account transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <param name="sort">Sort direction (optional, default to DESC)</param>
        /// <param name="by">Filter field (optional, default to timestamp)</param>
        /// <param name="from">Datetime in iso format or timestamp in millisecond, or index. (optional)</param>
        /// <param name="till">Datetime in iso format or timestamp in millisecond, or index. (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Transaction&gt;</returns>
        ApiResponse<List<Transaction>> AccountTransactionsGetWithHttpInfo (string currency = null, string sort = null, string by = null, string from = null, string till = null, int? limit = null, int? offset = null);
        /// <summary>
        /// Get account transaction by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Transaction</returns>
        Transaction AccountTransactionsIdGet (string id);

        /// <summary>
        /// Get account transaction by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Transaction</returns>
        ApiResponse<Transaction> AccountTransactionsIdGetWithHttpInfo (string id);
        /// <summary>
        /// Transfer amount to trading
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="amount"></param>
        /// <param name="type"></param>
        /// <returns>InlineResponse400</returns>
        InlineResponse400 AccountTransferPost (string currency, string amount, string type);

        /// <summary>
        /// Transfer amount to trading
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="amount"></param>
        /// <param name="type"></param>
        /// <returns>ApiResponse of InlineResponse400</returns>
        ApiResponse<InlineResponse400> AccountTransferPostWithHttpInfo (string currency, string amount, string type);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get main acccount balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Balance&gt;</returns>
        System.Threading.Tasks.Task<List<Balance>> AccountBalanceGetAsync ();

        /// <summary>
        /// Get main acccount balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Balance&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Balance>>> AccountBalanceGetAsyncWithHttpInfo ();
        /// <summary>
        /// Get deposit crypro address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>Task of Address</returns>
        System.Threading.Tasks.Task<Address> AccountCryptoAddressCurrencyGetAsync (string currency);

        /// <summary>
        /// Get deposit crypro address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>Task of ApiResponse (Address)</returns>
        System.Threading.Tasks.Task<ApiResponse<Address>> AccountCryptoAddressCurrencyGetAsyncWithHttpInfo (string currency);
        /// <summary>
        /// Create new deposit crypro address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>Task of Address</returns>
        System.Threading.Tasks.Task<Address> AccountCryptoAddressCurrencyPostAsync (string currency);

        /// <summary>
        /// Create new deposit crypro address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>Task of ApiResponse (Address)</returns>
        System.Threading.Tasks.Task<ApiResponse<Address>> AccountCryptoAddressCurrencyPostAsyncWithHttpInfo (string currency);
        /// <summary>
        /// Rollback withdraw crypro
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of WithdrawConfirm</returns>
        System.Threading.Tasks.Task<WithdrawConfirm> AccountCryptoWithdrawIdDeleteAsync (string id);

        /// <summary>
        /// Rollback withdraw crypro
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (WithdrawConfirm)</returns>
        System.Threading.Tasks.Task<ApiResponse<WithdrawConfirm>> AccountCryptoWithdrawIdDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Commit withdraw crypro
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of WithdrawConfirm</returns>
        System.Threading.Tasks.Task<WithdrawConfirm> AccountCryptoWithdrawIdPutAsync (string id);

        /// <summary>
        /// Commit withdraw crypro
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (WithdrawConfirm)</returns>
        System.Threading.Tasks.Task<ApiResponse<WithdrawConfirm>> AccountCryptoWithdrawIdPutAsyncWithHttpInfo (string id);
        /// <summary>
        /// Withdraw crypro
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="amount"></param>
        /// <param name="address"></param>
        /// <param name="paymentId"> (optional)</param>
        /// <param name="networkFee">Suggest preferred network fee. (optional)</param>
        /// <param name="includeFee">If enabled, then fee will be subtracted from amount. (optional, default to false)</param>
        /// <param name="autoCommit">If (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AccountCryptoWithdrawPostAsync (string currency, string amount, string address, string paymentId = null, string networkFee = null, bool? includeFee = null, bool? autoCommit = null);

        /// <summary>
        /// Withdraw crypro
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="amount"></param>
        /// <param name="address"></param>
        /// <param name="paymentId"> (optional)</param>
        /// <param name="networkFee">Suggest preferred network fee. (optional)</param>
        /// <param name="includeFee">If enabled, then fee will be subtracted from amount. (optional, default to false)</param>
        /// <param name="autoCommit">If (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AccountCryptoWithdrawPostAsyncWithHttpInfo (string currency, string amount, string address, string paymentId = null, string networkFee = null, bool? includeFee = null, bool? autoCommit = null);
        /// <summary>
        /// Get account transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <param name="sort">Sort direction (optional, default to DESC)</param>
        /// <param name="by">Filter field (optional, default to timestamp)</param>
        /// <param name="from">Datetime in iso format or timestamp in millisecond, or index. (optional)</param>
        /// <param name="till">Datetime in iso format or timestamp in millisecond, or index. (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;Transaction&gt;</returns>
        System.Threading.Tasks.Task<List<Transaction>> AccountTransactionsGetAsync (string currency = null, string sort = null, string by = null, string from = null, string till = null, int? limit = null, int? offset = null);

        /// <summary>
        /// Get account transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <param name="sort">Sort direction (optional, default to DESC)</param>
        /// <param name="by">Filter field (optional, default to timestamp)</param>
        /// <param name="from">Datetime in iso format or timestamp in millisecond, or index. (optional)</param>
        /// <param name="till">Datetime in iso format or timestamp in millisecond, or index. (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Transaction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Transaction>>> AccountTransactionsGetAsyncWithHttpInfo (string currency = null, string sort = null, string by = null, string from = null, string till = null, int? limit = null, int? offset = null);
        /// <summary>
        /// Get account transaction by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Transaction</returns>
        System.Threading.Tasks.Task<Transaction> AccountTransactionsIdGetAsync (string id);

        /// <summary>
        /// Get account transaction by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<Transaction>> AccountTransactionsIdGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Transfer amount to trading
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="amount"></param>
        /// <param name="type"></param>
        /// <returns>Task of InlineResponse400</returns>
        System.Threading.Tasks.Task<InlineResponse400> AccountTransferPostAsync (string currency, string amount, string type);

        /// <summary>
        /// Transfer amount to trading
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="amount"></param>
        /// <param name="type"></param>
        /// <returns>Task of ApiResponse (InlineResponse400)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse400>> AccountTransferPostAsyncWithHttpInfo (string currency, string amount, string type);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountApi : IAccountApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get main acccount balance 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Balance&gt;</returns>
        public List<Balance> AccountBalanceGet ()
        {
             ApiResponse<List<Balance>> localVarResponse = AccountBalanceGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get main acccount balance 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Balance&gt;</returns>
        public ApiResponse< List<Balance> > AccountBalanceGetWithHttpInfo ()
        {

            var localVarPath = "/account/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountBalanceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Balance>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Balance>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Balance>)));
        }

        /// <summary>
        /// Get main acccount balance 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Balance&gt;</returns>
        public async System.Threading.Tasks.Task<List<Balance>> AccountBalanceGetAsync ()
        {
             ApiResponse<List<Balance>> localVarResponse = await AccountBalanceGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get main acccount balance 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Balance&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Balance>>> AccountBalanceGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/account/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountBalanceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Balance>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Balance>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Balance>)));
        }

        /// <summary>
        /// Get deposit crypro address 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>Address</returns>
        public Address AccountCryptoAddressCurrencyGet (string currency)
        {
             ApiResponse<Address> localVarResponse = AccountCryptoAddressCurrencyGetWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get deposit crypro address 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>ApiResponse of Address</returns>
        public ApiResponse< Address > AccountCryptoAddressCurrencyGetWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling AccountApi->AccountCryptoAddressCurrencyGet");

            var localVarPath = "/account/crypto/address/{currency}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarPathParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountCryptoAddressCurrencyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Address>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Address) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Address)));
        }

        /// <summary>
        /// Get deposit crypro address 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>Task of Address</returns>
        public async System.Threading.Tasks.Task<Address> AccountCryptoAddressCurrencyGetAsync (string currency)
        {
             ApiResponse<Address> localVarResponse = await AccountCryptoAddressCurrencyGetAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get deposit crypro address 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>Task of ApiResponse (Address)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Address>> AccountCryptoAddressCurrencyGetAsyncWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling AccountApi->AccountCryptoAddressCurrencyGet");

            var localVarPath = "/account/crypto/address/{currency}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarPathParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountCryptoAddressCurrencyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Address>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Address) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Address)));
        }

        /// <summary>
        /// Create new deposit crypro address 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>Address</returns>
        public Address AccountCryptoAddressCurrencyPost (string currency)
        {
             ApiResponse<Address> localVarResponse = AccountCryptoAddressCurrencyPostWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new deposit crypro address 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>ApiResponse of Address</returns>
        public ApiResponse< Address > AccountCryptoAddressCurrencyPostWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling AccountApi->AccountCryptoAddressCurrencyPost");

            var localVarPath = "/account/crypto/address/{currency}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarPathParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountCryptoAddressCurrencyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Address>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Address) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Address)));
        }

        /// <summary>
        /// Create new deposit crypro address 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>Task of Address</returns>
        public async System.Threading.Tasks.Task<Address> AccountCryptoAddressCurrencyPostAsync (string currency)
        {
             ApiResponse<Address> localVarResponse = await AccountCryptoAddressCurrencyPostAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new deposit crypro address 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>Task of ApiResponse (Address)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Address>> AccountCryptoAddressCurrencyPostAsyncWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling AccountApi->AccountCryptoAddressCurrencyPost");

            var localVarPath = "/account/crypto/address/{currency}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarPathParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountCryptoAddressCurrencyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Address>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Address) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Address)));
        }

        /// <summary>
        /// Rollback withdraw crypro 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>WithdrawConfirm</returns>
        public WithdrawConfirm AccountCryptoWithdrawIdDelete (string id)
        {
             ApiResponse<WithdrawConfirm> localVarResponse = AccountCryptoWithdrawIdDeleteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Rollback withdraw crypro 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of WithdrawConfirm</returns>
        public ApiResponse< WithdrawConfirm > AccountCryptoWithdrawIdDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountApi->AccountCryptoWithdrawIdDelete");

            var localVarPath = "/account/crypto/withdraw/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountCryptoWithdrawIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WithdrawConfirm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WithdrawConfirm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WithdrawConfirm)));
        }

        /// <summary>
        /// Rollback withdraw crypro 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of WithdrawConfirm</returns>
        public async System.Threading.Tasks.Task<WithdrawConfirm> AccountCryptoWithdrawIdDeleteAsync (string id)
        {
             ApiResponse<WithdrawConfirm> localVarResponse = await AccountCryptoWithdrawIdDeleteAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Rollback withdraw crypro 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (WithdrawConfirm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WithdrawConfirm>> AccountCryptoWithdrawIdDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountApi->AccountCryptoWithdrawIdDelete");

            var localVarPath = "/account/crypto/withdraw/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountCryptoWithdrawIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WithdrawConfirm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WithdrawConfirm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WithdrawConfirm)));
        }

        /// <summary>
        /// Commit withdraw crypro 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>WithdrawConfirm</returns>
        public WithdrawConfirm AccountCryptoWithdrawIdPut (string id)
        {
             ApiResponse<WithdrawConfirm> localVarResponse = AccountCryptoWithdrawIdPutWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Commit withdraw crypro 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of WithdrawConfirm</returns>
        public ApiResponse< WithdrawConfirm > AccountCryptoWithdrawIdPutWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountApi->AccountCryptoWithdrawIdPut");

            var localVarPath = "/account/crypto/withdraw/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountCryptoWithdrawIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WithdrawConfirm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WithdrawConfirm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WithdrawConfirm)));
        }

        /// <summary>
        /// Commit withdraw crypro 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of WithdrawConfirm</returns>
        public async System.Threading.Tasks.Task<WithdrawConfirm> AccountCryptoWithdrawIdPutAsync (string id)
        {
             ApiResponse<WithdrawConfirm> localVarResponse = await AccountCryptoWithdrawIdPutAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Commit withdraw crypro 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (WithdrawConfirm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WithdrawConfirm>> AccountCryptoWithdrawIdPutAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountApi->AccountCryptoWithdrawIdPut");

            var localVarPath = "/account/crypto/withdraw/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountCryptoWithdrawIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WithdrawConfirm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WithdrawConfirm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WithdrawConfirm)));
        }

        /// <summary>
        /// Withdraw crypro 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="amount"></param>
        /// <param name="address"></param>
        /// <param name="paymentId"> (optional)</param>
        /// <param name="networkFee">Suggest preferred network fee. (optional)</param>
        /// <param name="includeFee">If enabled, then fee will be subtracted from amount. (optional, default to false)</param>
        /// <param name="autoCommit">If (optional, default to true)</param>
        /// <returns></returns>
        public void AccountCryptoWithdrawPost (string currency, string amount, string address, string paymentId = null, string networkFee = null, bool? includeFee = null, bool? autoCommit = null)
        {
             AccountCryptoWithdrawPostWithHttpInfo(currency, amount, address, paymentId, networkFee, includeFee, autoCommit);
        }

        /// <summary>
        /// Withdraw crypro 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="amount"></param>
        /// <param name="address"></param>
        /// <param name="paymentId"> (optional)</param>
        /// <param name="networkFee">Suggest preferred network fee. (optional)</param>
        /// <param name="includeFee">If enabled, then fee will be subtracted from amount. (optional, default to false)</param>
        /// <param name="autoCommit">If (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AccountCryptoWithdrawPostWithHttpInfo (string currency, string amount, string address, string paymentId = null, string networkFee = null, bool? includeFee = null, bool? autoCommit = null)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling AccountApi->AccountCryptoWithdrawPost");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling AccountApi->AccountCryptoWithdrawPost");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AccountApi->AccountCryptoWithdrawPost");

            var localVarPath = "/account/crypto/withdraw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarFormParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // form parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (address != null) localVarFormParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // form parameter
            if (paymentId != null) localVarFormParams.Add("paymentId", this.Configuration.ApiClient.ParameterToString(paymentId)); // form parameter
            if (networkFee != null) localVarFormParams.Add("networkFee", this.Configuration.ApiClient.ParameterToString(networkFee)); // form parameter
            if (includeFee != null) localVarFormParams.Add("includeFee", this.Configuration.ApiClient.ParameterToString(includeFee)); // form parameter
            if (autoCommit != null) localVarFormParams.Add("autoCommit", this.Configuration.ApiClient.ParameterToString(autoCommit)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountCryptoWithdrawPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Withdraw crypro 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="amount"></param>
        /// <param name="address"></param>
        /// <param name="paymentId"> (optional)</param>
        /// <param name="networkFee">Suggest preferred network fee. (optional)</param>
        /// <param name="includeFee">If enabled, then fee will be subtracted from amount. (optional, default to false)</param>
        /// <param name="autoCommit">If (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AccountCryptoWithdrawPostAsync (string currency, string amount, string address, string paymentId = null, string networkFee = null, bool? includeFee = null, bool? autoCommit = null)
        {
             await AccountCryptoWithdrawPostAsyncWithHttpInfo(currency, amount, address, paymentId, networkFee, includeFee, autoCommit);

        }

        /// <summary>
        /// Withdraw crypro 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="amount"></param>
        /// <param name="address"></param>
        /// <param name="paymentId"> (optional)</param>
        /// <param name="networkFee">Suggest preferred network fee. (optional)</param>
        /// <param name="includeFee">If enabled, then fee will be subtracted from amount. (optional, default to false)</param>
        /// <param name="autoCommit">If (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AccountCryptoWithdrawPostAsyncWithHttpInfo (string currency, string amount, string address, string paymentId = null, string networkFee = null, bool? includeFee = null, bool? autoCommit = null)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling AccountApi->AccountCryptoWithdrawPost");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling AccountApi->AccountCryptoWithdrawPost");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AccountApi->AccountCryptoWithdrawPost");

            var localVarPath = "/account/crypto/withdraw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarFormParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // form parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (address != null) localVarFormParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // form parameter
            if (paymentId != null) localVarFormParams.Add("paymentId", this.Configuration.ApiClient.ParameterToString(paymentId)); // form parameter
            if (networkFee != null) localVarFormParams.Add("networkFee", this.Configuration.ApiClient.ParameterToString(networkFee)); // form parameter
            if (includeFee != null) localVarFormParams.Add("includeFee", this.Configuration.ApiClient.ParameterToString(includeFee)); // form parameter
            if (autoCommit != null) localVarFormParams.Add("autoCommit", this.Configuration.ApiClient.ParameterToString(autoCommit)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountCryptoWithdrawPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get account transactions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <param name="sort">Sort direction (optional, default to DESC)</param>
        /// <param name="by">Filter field (optional, default to timestamp)</param>
        /// <param name="from">Datetime in iso format or timestamp in millisecond, or index. (optional)</param>
        /// <param name="till">Datetime in iso format or timestamp in millisecond, or index. (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;Transaction&gt;</returns>
        public List<Transaction> AccountTransactionsGet (string currency = null, string sort = null, string by = null, string from = null, string till = null, int? limit = null, int? offset = null)
        {
             ApiResponse<List<Transaction>> localVarResponse = AccountTransactionsGetWithHttpInfo(currency, sort, by, from, till, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get account transactions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <param name="sort">Sort direction (optional, default to DESC)</param>
        /// <param name="by">Filter field (optional, default to timestamp)</param>
        /// <param name="from">Datetime in iso format or timestamp in millisecond, or index. (optional)</param>
        /// <param name="till">Datetime in iso format or timestamp in millisecond, or index. (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Transaction&gt;</returns>
        public ApiResponse< List<Transaction> > AccountTransactionsGetWithHttpInfo (string currency = null, string sort = null, string by = null, string from = null, string till = null, int? limit = null, int? offset = null)
        {

            var localVarPath = "/account/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency", currency)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (by != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "by", by)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (till != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "till", till)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountTransactionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Transaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Transaction>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Transaction>)));
        }

        /// <summary>
        /// Get account transactions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <param name="sort">Sort direction (optional, default to DESC)</param>
        /// <param name="by">Filter field (optional, default to timestamp)</param>
        /// <param name="from">Datetime in iso format or timestamp in millisecond, or index. (optional)</param>
        /// <param name="till">Datetime in iso format or timestamp in millisecond, or index. (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;Transaction&gt;</returns>
        public async System.Threading.Tasks.Task<List<Transaction>> AccountTransactionsGetAsync (string currency = null, string sort = null, string by = null, string from = null, string till = null, int? limit = null, int? offset = null)
        {
             ApiResponse<List<Transaction>> localVarResponse = await AccountTransactionsGetAsyncWithHttpInfo(currency, sort, by, from, till, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get account transactions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <param name="sort">Sort direction (optional, default to DESC)</param>
        /// <param name="by">Filter field (optional, default to timestamp)</param>
        /// <param name="from">Datetime in iso format or timestamp in millisecond, or index. (optional)</param>
        /// <param name="till">Datetime in iso format or timestamp in millisecond, or index. (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Transaction&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Transaction>>> AccountTransactionsGetAsyncWithHttpInfo (string currency = null, string sort = null, string by = null, string from = null, string till = null, int? limit = null, int? offset = null)
        {

            var localVarPath = "/account/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency", currency)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (by != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "by", by)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (till != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "till", till)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountTransactionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Transaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Transaction>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Transaction>)));
        }

        /// <summary>
        /// Get account transaction by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Transaction</returns>
        public Transaction AccountTransactionsIdGet (string id)
        {
             ApiResponse<Transaction> localVarResponse = AccountTransactionsIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get account transaction by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Transaction</returns>
        public ApiResponse< Transaction > AccountTransactionsIdGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountApi->AccountTransactionsIdGet");

            var localVarPath = "/account/transactions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountTransactionsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Transaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transaction)));
        }

        /// <summary>
        /// Get account transaction by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Transaction</returns>
        public async System.Threading.Tasks.Task<Transaction> AccountTransactionsIdGetAsync (string id)
        {
             ApiResponse<Transaction> localVarResponse = await AccountTransactionsIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get account transaction by id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Transaction>> AccountTransactionsIdGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AccountApi->AccountTransactionsIdGet");

            var localVarPath = "/account/transactions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountTransactionsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Transaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transaction)));
        }

        /// <summary>
        /// Transfer amount to trading 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="amount"></param>
        /// <param name="type"></param>
        /// <returns>InlineResponse400</returns>
        public InlineResponse400 AccountTransferPost (string currency, string amount, string type)
        {
             ApiResponse<InlineResponse400> localVarResponse = AccountTransferPostWithHttpInfo(currency, amount, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer amount to trading 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="amount"></param>
        /// <param name="type"></param>
        /// <returns>ApiResponse of InlineResponse400</returns>
        public ApiResponse< InlineResponse400 > AccountTransferPostWithHttpInfo (string currency, string amount, string type)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling AccountApi->AccountTransferPost");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling AccountApi->AccountTransferPost");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling AccountApi->AccountTransferPost");

            var localVarPath = "/account/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarFormParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // form parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountTransferPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse400>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse400) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse400)));
        }

        /// <summary>
        /// Transfer amount to trading 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="amount"></param>
        /// <param name="type"></param>
        /// <returns>Task of InlineResponse400</returns>
        public async System.Threading.Tasks.Task<InlineResponse400> AccountTransferPostAsync (string currency, string amount, string type)
        {
             ApiResponse<InlineResponse400> localVarResponse = await AccountTransferPostAsyncWithHttpInfo(currency, amount, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transfer amount to trading 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <param name="amount"></param>
        /// <param name="type"></param>
        /// <returns>Task of ApiResponse (InlineResponse400)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse400>> AccountTransferPostAsyncWithHttpInfo (string currency, string amount, string type)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling AccountApi->AccountTransferPost");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling AccountApi->AccountTransferPost");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling AccountApi->AccountTransferPost");

            var localVarPath = "/account/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarFormParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // form parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountTransferPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse400>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse400) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse400)));
        }

    }
}
