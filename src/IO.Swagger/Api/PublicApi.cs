/* 
 * HitBTC API
 *
 * Create API keys in your profile https://hitbtc.com/settings/api-keys and use public API key as username and secret as password to authorize. 
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPublicApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Candles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="period"> (optional, default to M30)</param>
        /// <returns>List&lt;Candle&gt;</returns>
        List<Candle> PublicCandlesSymbolGet (string symbol, int? limit = null, string period = null);

        /// <summary>
        /// Candles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="period"> (optional, default to M30)</param>
        /// <returns>ApiResponse of List&lt;Candle&gt;</returns>
        ApiResponse<List<Candle>> PublicCandlesSymbolGetWithHttpInfo (string symbol, int? limit = null, string period = null);
        /// <summary>
        /// Get currency info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>Currency</returns>
        Currency PublicCurrencyCurrencyGet (string currency);

        /// <summary>
        /// Get currency info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>ApiResponse of Currency</returns>
        ApiResponse<Currency> PublicCurrencyCurrencyGetWithHttpInfo (string currency);
        /// <summary>
        /// Available Currencies
        /// </summary>
        /// <remarks>
        /// Get list of avialable Symbols (Currency Pairs). You can read more info at http://www.investopedia.com/terms/c/currencypair.asp 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Currency&gt;</returns>
        List<Currency> PublicCurrencyGet ();

        /// <summary>
        /// Available Currencies
        /// </summary>
        /// <remarks>
        /// Get list of avialable Symbols (Currency Pairs). You can read more info at http://www.investopedia.com/terms/c/currencypair.asp 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Currency&gt;</returns>
        ApiResponse<List<Currency>> PublicCurrencyGetWithHttpInfo ();
        /// <summary>
        /// Orderbook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="limit">0 - full orderbook otherwise number of levels (optional, default to 100)</param>
        /// <returns>Orderbook</returns>
        Orderbook PublicOrderbookSymbolGet (string symbol, int? limit = null);

        /// <summary>
        /// Orderbook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="limit">0 - full orderbook otherwise number of levels (optional, default to 100)</param>
        /// <returns>ApiResponse of Orderbook</returns>
        ApiResponse<Orderbook> PublicOrderbookSymbolGetWithHttpInfo (string symbol, int? limit = null);
        /// <summary>
        /// Available Currency Symbols
        /// </summary>
        /// <remarks>
        /// Get list of avialable Symbols (Currency Pairs). You can read more info at http://www.investopedia.com/terms/c/currencypair.asp 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Symbol&gt;</returns>
        List<Symbol> PublicSymbolGet ();

        /// <summary>
        /// Available Currency Symbols
        /// </summary>
        /// <remarks>
        /// Get list of avialable Symbols (Currency Pairs). You can read more info at http://www.investopedia.com/terms/c/currencypair.asp 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Symbol&gt;</returns>
        ApiResponse<List<Symbol>> PublicSymbolGetWithHttpInfo ();
        /// <summary>
        /// Get symbol info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <returns>Symbol</returns>
        Symbol PublicSymbolSymbolGet (string symbol);

        /// <summary>
        /// Get symbol info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <returns>ApiResponse of Symbol</returns>
        ApiResponse<Symbol> PublicSymbolSymbolGetWithHttpInfo (string symbol);
        /// <summary>
        /// Ticker list for all symbols
        /// </summary>
        /// <remarks>
        /// The Ticker endpoint returns last 24H information about of all symbol. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Ticker&gt;</returns>
        List<Ticker> PublicTickerGet ();

        /// <summary>
        /// Ticker list for all symbols
        /// </summary>
        /// <remarks>
        /// The Ticker endpoint returns last 24H information about of all symbol. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Ticker&gt;</returns>
        ApiResponse<List<Ticker>> PublicTickerGetWithHttpInfo ();
        /// <summary>
        /// Ticker for symbol
        /// </summary>
        /// <remarks>
        /// The Ticker endpoint returns last 24H information about symbol. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <returns>Ticker</returns>
        Ticker PublicTickerSymbolGet (string symbol);

        /// <summary>
        /// Ticker for symbol
        /// </summary>
        /// <remarks>
        /// The Ticker endpoint returns last 24H information about symbol. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <returns>ApiResponse of Ticker</returns>
        ApiResponse<Ticker> PublicTickerSymbolGetWithHttpInfo (string symbol);
        /// <summary>
        /// Trades
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="sort">Sort direction (optional, default to DESC)</param>
        /// <param name="by">Filter field (optional, default to timestamp)</param>
        /// <param name="from">If filter by timestamp, then datetime in iso format or timestamp in millisecond otherwise trade id (optional)</param>
        /// <param name="till">If filter by timestamp, then datetime in iso format or timestamp in millisecond otherwise trade id (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;PublicTrade&gt;</returns>
        List<PublicTrade> PublicTradesSymbolGet (string symbol, string sort = null, string by = null, string from = null, string till = null, int? limit = null, int? offset = null);

        /// <summary>
        /// Trades
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="sort">Sort direction (optional, default to DESC)</param>
        /// <param name="by">Filter field (optional, default to timestamp)</param>
        /// <param name="from">If filter by timestamp, then datetime in iso format or timestamp in millisecond otherwise trade id (optional)</param>
        /// <param name="till">If filter by timestamp, then datetime in iso format or timestamp in millisecond otherwise trade id (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;PublicTrade&gt;</returns>
        ApiResponse<List<PublicTrade>> PublicTradesSymbolGetWithHttpInfo (string symbol, string sort = null, string by = null, string from = null, string till = null, int? limit = null, int? offset = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Candles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="period"> (optional, default to M30)</param>
        /// <returns>Task of List&lt;Candle&gt;</returns>
        System.Threading.Tasks.Task<List<Candle>> PublicCandlesSymbolGetAsync (string symbol, int? limit = null, string period = null);

        /// <summary>
        /// Candles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="period"> (optional, default to M30)</param>
        /// <returns>Task of ApiResponse (List&lt;Candle&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Candle>>> PublicCandlesSymbolGetAsyncWithHttpInfo (string symbol, int? limit = null, string period = null);
        /// <summary>
        /// Get currency info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>Task of Currency</returns>
        System.Threading.Tasks.Task<Currency> PublicCurrencyCurrencyGetAsync (string currency);

        /// <summary>
        /// Get currency info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>Task of ApiResponse (Currency)</returns>
        System.Threading.Tasks.Task<ApiResponse<Currency>> PublicCurrencyCurrencyGetAsyncWithHttpInfo (string currency);
        /// <summary>
        /// Available Currencies
        /// </summary>
        /// <remarks>
        /// Get list of avialable Symbols (Currency Pairs). You can read more info at http://www.investopedia.com/terms/c/currencypair.asp 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Currency&gt;</returns>
        System.Threading.Tasks.Task<List<Currency>> PublicCurrencyGetAsync ();

        /// <summary>
        /// Available Currencies
        /// </summary>
        /// <remarks>
        /// Get list of avialable Symbols (Currency Pairs). You can read more info at http://www.investopedia.com/terms/c/currencypair.asp 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Currency&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Currency>>> PublicCurrencyGetAsyncWithHttpInfo ();
        /// <summary>
        /// Orderbook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="limit">0 - full orderbook otherwise number of levels (optional, default to 100)</param>
        /// <returns>Task of Orderbook</returns>
        System.Threading.Tasks.Task<Orderbook> PublicOrderbookSymbolGetAsync (string symbol, int? limit = null);

        /// <summary>
        /// Orderbook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="limit">0 - full orderbook otherwise number of levels (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (Orderbook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Orderbook>> PublicOrderbookSymbolGetAsyncWithHttpInfo (string symbol, int? limit = null);
        /// <summary>
        /// Available Currency Symbols
        /// </summary>
        /// <remarks>
        /// Get list of avialable Symbols (Currency Pairs). You can read more info at http://www.investopedia.com/terms/c/currencypair.asp 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Symbol&gt;</returns>
        System.Threading.Tasks.Task<List<Symbol>> PublicSymbolGetAsync ();

        /// <summary>
        /// Available Currency Symbols
        /// </summary>
        /// <remarks>
        /// Get list of avialable Symbols (Currency Pairs). You can read more info at http://www.investopedia.com/terms/c/currencypair.asp 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Symbol&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Symbol>>> PublicSymbolGetAsyncWithHttpInfo ();
        /// <summary>
        /// Get symbol info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <returns>Task of Symbol</returns>
        System.Threading.Tasks.Task<Symbol> PublicSymbolSymbolGetAsync (string symbol);

        /// <summary>
        /// Get symbol info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <returns>Task of ApiResponse (Symbol)</returns>
        System.Threading.Tasks.Task<ApiResponse<Symbol>> PublicSymbolSymbolGetAsyncWithHttpInfo (string symbol);
        /// <summary>
        /// Ticker list for all symbols
        /// </summary>
        /// <remarks>
        /// The Ticker endpoint returns last 24H information about of all symbol. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Ticker&gt;</returns>
        System.Threading.Tasks.Task<List<Ticker>> PublicTickerGetAsync ();

        /// <summary>
        /// Ticker list for all symbols
        /// </summary>
        /// <remarks>
        /// The Ticker endpoint returns last 24H information about of all symbol. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Ticker&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Ticker>>> PublicTickerGetAsyncWithHttpInfo ();
        /// <summary>
        /// Ticker for symbol
        /// </summary>
        /// <remarks>
        /// The Ticker endpoint returns last 24H information about symbol. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <returns>Task of Ticker</returns>
        System.Threading.Tasks.Task<Ticker> PublicTickerSymbolGetAsync (string symbol);

        /// <summary>
        /// Ticker for symbol
        /// </summary>
        /// <remarks>
        /// The Ticker endpoint returns last 24H information about symbol. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <returns>Task of ApiResponse (Ticker)</returns>
        System.Threading.Tasks.Task<ApiResponse<Ticker>> PublicTickerSymbolGetAsyncWithHttpInfo (string symbol);
        /// <summary>
        /// Trades
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="sort">Sort direction (optional, default to DESC)</param>
        /// <param name="by">Filter field (optional, default to timestamp)</param>
        /// <param name="from">If filter by timestamp, then datetime in iso format or timestamp in millisecond otherwise trade id (optional)</param>
        /// <param name="till">If filter by timestamp, then datetime in iso format or timestamp in millisecond otherwise trade id (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;PublicTrade&gt;</returns>
        System.Threading.Tasks.Task<List<PublicTrade>> PublicTradesSymbolGetAsync (string symbol, string sort = null, string by = null, string from = null, string till = null, int? limit = null, int? offset = null);

        /// <summary>
        /// Trades
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="sort">Sort direction (optional, default to DESC)</param>
        /// <param name="by">Filter field (optional, default to timestamp)</param>
        /// <param name="from">If filter by timestamp, then datetime in iso format or timestamp in millisecond otherwise trade id (optional)</param>
        /// <param name="till">If filter by timestamp, then datetime in iso format or timestamp in millisecond otherwise trade id (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PublicTrade&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PublicTrade>>> PublicTradesSymbolGetAsyncWithHttpInfo (string symbol, string sort = null, string by = null, string from = null, string till = null, int? limit = null, int? offset = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PublicApi : IPublicApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PublicApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PublicApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Candles 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="period"> (optional, default to M30)</param>
        /// <returns>List&lt;Candle&gt;</returns>
        public List<Candle> PublicCandlesSymbolGet (string symbol, int? limit = null, string period = null)
        {
             ApiResponse<List<Candle>> localVarResponse = PublicCandlesSymbolGetWithHttpInfo(symbol, limit, period);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Candles 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="period"> (optional, default to M30)</param>
        /// <returns>ApiResponse of List&lt;Candle&gt;</returns>
        public ApiResponse< List<Candle> > PublicCandlesSymbolGetWithHttpInfo (string symbol, int? limit = null, string period = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PublicApi->PublicCandlesSymbolGet");

            var localVarPath = "/public/candles/{symbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (period != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "period", period)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicCandlesSymbolGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Candle>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Candle>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Candle>)));
        }

        /// <summary>
        /// Candles 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="period"> (optional, default to M30)</param>
        /// <returns>Task of List&lt;Candle&gt;</returns>
        public async System.Threading.Tasks.Task<List<Candle>> PublicCandlesSymbolGetAsync (string symbol, int? limit = null, string period = null)
        {
             ApiResponse<List<Candle>> localVarResponse = await PublicCandlesSymbolGetAsyncWithHttpInfo(symbol, limit, period);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Candles 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="period"> (optional, default to M30)</param>
        /// <returns>Task of ApiResponse (List&lt;Candle&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Candle>>> PublicCandlesSymbolGetAsyncWithHttpInfo (string symbol, int? limit = null, string period = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PublicApi->PublicCandlesSymbolGet");

            var localVarPath = "/public/candles/{symbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (period != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "period", period)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicCandlesSymbolGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Candle>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Candle>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Candle>)));
        }

        /// <summary>
        /// Get currency info 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>Currency</returns>
        public Currency PublicCurrencyCurrencyGet (string currency)
        {
             ApiResponse<Currency> localVarResponse = PublicCurrencyCurrencyGetWithHttpInfo(currency);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get currency info 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>ApiResponse of Currency</returns>
        public ApiResponse< Currency > PublicCurrencyCurrencyGetWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling PublicApi->PublicCurrencyCurrencyGet");

            var localVarPath = "/public/currency/{currency}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarPathParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicCurrencyCurrencyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Currency>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Currency) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Currency)));
        }

        /// <summary>
        /// Get currency info 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>Task of Currency</returns>
        public async System.Threading.Tasks.Task<Currency> PublicCurrencyCurrencyGetAsync (string currency)
        {
             ApiResponse<Currency> localVarResponse = await PublicCurrencyCurrencyGetAsyncWithHttpInfo(currency);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get currency info 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"></param>
        /// <returns>Task of ApiResponse (Currency)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Currency>> PublicCurrencyCurrencyGetAsyncWithHttpInfo (string currency)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling PublicApi->PublicCurrencyCurrencyGet");

            var localVarPath = "/public/currency/{currency}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currency != null) localVarPathParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicCurrencyCurrencyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Currency>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Currency) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Currency)));
        }

        /// <summary>
        /// Available Currencies Get list of avialable Symbols (Currency Pairs). You can read more info at http://www.investopedia.com/terms/c/currencypair.asp 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Currency&gt;</returns>
        public List<Currency> PublicCurrencyGet ()
        {
             ApiResponse<List<Currency>> localVarResponse = PublicCurrencyGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Available Currencies Get list of avialable Symbols (Currency Pairs). You can read more info at http://www.investopedia.com/terms/c/currencypair.asp 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Currency&gt;</returns>
        public ApiResponse< List<Currency> > PublicCurrencyGetWithHttpInfo ()
        {

            var localVarPath = "/public/currency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicCurrencyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Currency>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Currency>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Currency>)));
        }

        /// <summary>
        /// Available Currencies Get list of avialable Symbols (Currency Pairs). You can read more info at http://www.investopedia.com/terms/c/currencypair.asp 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Currency&gt;</returns>
        public async System.Threading.Tasks.Task<List<Currency>> PublicCurrencyGetAsync ()
        {
             ApiResponse<List<Currency>> localVarResponse = await PublicCurrencyGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Available Currencies Get list of avialable Symbols (Currency Pairs). You can read more info at http://www.investopedia.com/terms/c/currencypair.asp 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Currency&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Currency>>> PublicCurrencyGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/public/currency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicCurrencyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Currency>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Currency>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Currency>)));
        }

        /// <summary>
        /// Orderbook 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="limit">0 - full orderbook otherwise number of levels (optional, default to 100)</param>
        /// <returns>Orderbook</returns>
        public Orderbook PublicOrderbookSymbolGet (string symbol, int? limit = null)
        {
             ApiResponse<Orderbook> localVarResponse = PublicOrderbookSymbolGetWithHttpInfo(symbol, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Orderbook 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="limit">0 - full orderbook otherwise number of levels (optional, default to 100)</param>
        /// <returns>ApiResponse of Orderbook</returns>
        public ApiResponse< Orderbook > PublicOrderbookSymbolGetWithHttpInfo (string symbol, int? limit = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PublicApi->PublicOrderbookSymbolGet");

            var localVarPath = "/public/orderbook/{symbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicOrderbookSymbolGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Orderbook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Orderbook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Orderbook)));
        }

        /// <summary>
        /// Orderbook 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="limit">0 - full orderbook otherwise number of levels (optional, default to 100)</param>
        /// <returns>Task of Orderbook</returns>
        public async System.Threading.Tasks.Task<Orderbook> PublicOrderbookSymbolGetAsync (string symbol, int? limit = null)
        {
             ApiResponse<Orderbook> localVarResponse = await PublicOrderbookSymbolGetAsyncWithHttpInfo(symbol, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Orderbook 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="limit">0 - full orderbook otherwise number of levels (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (Orderbook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Orderbook>> PublicOrderbookSymbolGetAsyncWithHttpInfo (string symbol, int? limit = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PublicApi->PublicOrderbookSymbolGet");

            var localVarPath = "/public/orderbook/{symbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicOrderbookSymbolGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Orderbook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Orderbook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Orderbook)));
        }

        /// <summary>
        /// Available Currency Symbols Get list of avialable Symbols (Currency Pairs). You can read more info at http://www.investopedia.com/terms/c/currencypair.asp 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Symbol&gt;</returns>
        public List<Symbol> PublicSymbolGet ()
        {
             ApiResponse<List<Symbol>> localVarResponse = PublicSymbolGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Available Currency Symbols Get list of avialable Symbols (Currency Pairs). You can read more info at http://www.investopedia.com/terms/c/currencypair.asp 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Symbol&gt;</returns>
        public ApiResponse< List<Symbol> > PublicSymbolGetWithHttpInfo ()
        {

            var localVarPath = "/public/symbol";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicSymbolGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Symbol>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Symbol>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Symbol>)));
        }

        /// <summary>
        /// Available Currency Symbols Get list of avialable Symbols (Currency Pairs). You can read more info at http://www.investopedia.com/terms/c/currencypair.asp 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Symbol&gt;</returns>
        public async System.Threading.Tasks.Task<List<Symbol>> PublicSymbolGetAsync ()
        {
             ApiResponse<List<Symbol>> localVarResponse = await PublicSymbolGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Available Currency Symbols Get list of avialable Symbols (Currency Pairs). You can read more info at http://www.investopedia.com/terms/c/currencypair.asp 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Symbol&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Symbol>>> PublicSymbolGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/public/symbol";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicSymbolGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Symbol>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Symbol>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Symbol>)));
        }

        /// <summary>
        /// Get symbol info 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <returns>Symbol</returns>
        public Symbol PublicSymbolSymbolGet (string symbol)
        {
             ApiResponse<Symbol> localVarResponse = PublicSymbolSymbolGetWithHttpInfo(symbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get symbol info 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <returns>ApiResponse of Symbol</returns>
        public ApiResponse< Symbol > PublicSymbolSymbolGetWithHttpInfo (string symbol)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PublicApi->PublicSymbolSymbolGet");

            var localVarPath = "/public/symbol/{symbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicSymbolSymbolGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Symbol>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Symbol) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Symbol)));
        }

        /// <summary>
        /// Get symbol info 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <returns>Task of Symbol</returns>
        public async System.Threading.Tasks.Task<Symbol> PublicSymbolSymbolGetAsync (string symbol)
        {
             ApiResponse<Symbol> localVarResponse = await PublicSymbolSymbolGetAsyncWithHttpInfo(symbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get symbol info 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <returns>Task of ApiResponse (Symbol)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Symbol>> PublicSymbolSymbolGetAsyncWithHttpInfo (string symbol)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PublicApi->PublicSymbolSymbolGet");

            var localVarPath = "/public/symbol/{symbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicSymbolSymbolGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Symbol>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Symbol) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Symbol)));
        }

        /// <summary>
        /// Ticker list for all symbols The Ticker endpoint returns last 24H information about of all symbol. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Ticker&gt;</returns>
        public List<Ticker> PublicTickerGet ()
        {
             ApiResponse<List<Ticker>> localVarResponse = PublicTickerGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Ticker list for all symbols The Ticker endpoint returns last 24H information about of all symbol. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Ticker&gt;</returns>
        public ApiResponse< List<Ticker> > PublicTickerGetWithHttpInfo ()
        {

            var localVarPath = "/public/ticker";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicTickerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Ticker>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Ticker>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Ticker>)));
        }

        /// <summary>
        /// Ticker list for all symbols The Ticker endpoint returns last 24H information about of all symbol. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Ticker&gt;</returns>
        public async System.Threading.Tasks.Task<List<Ticker>> PublicTickerGetAsync ()
        {
             ApiResponse<List<Ticker>> localVarResponse = await PublicTickerGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Ticker list for all symbols The Ticker endpoint returns last 24H information about of all symbol. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Ticker&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Ticker>>> PublicTickerGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/public/ticker";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicTickerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Ticker>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Ticker>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Ticker>)));
        }

        /// <summary>
        /// Ticker for symbol The Ticker endpoint returns last 24H information about symbol. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <returns>Ticker</returns>
        public Ticker PublicTickerSymbolGet (string symbol)
        {
             ApiResponse<Ticker> localVarResponse = PublicTickerSymbolGetWithHttpInfo(symbol);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Ticker for symbol The Ticker endpoint returns last 24H information about symbol. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <returns>ApiResponse of Ticker</returns>
        public ApiResponse< Ticker > PublicTickerSymbolGetWithHttpInfo (string symbol)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PublicApi->PublicTickerSymbolGet");

            var localVarPath = "/public/ticker/{symbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicTickerSymbolGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Ticker>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Ticker) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Ticker)));
        }

        /// <summary>
        /// Ticker for symbol The Ticker endpoint returns last 24H information about symbol. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <returns>Task of Ticker</returns>
        public async System.Threading.Tasks.Task<Ticker> PublicTickerSymbolGetAsync (string symbol)
        {
             ApiResponse<Ticker> localVarResponse = await PublicTickerSymbolGetAsyncWithHttpInfo(symbol);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Ticker for symbol The Ticker endpoint returns last 24H information about symbol. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <returns>Task of ApiResponse (Ticker)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Ticker>> PublicTickerSymbolGetAsyncWithHttpInfo (string symbol)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PublicApi->PublicTickerSymbolGet");

            var localVarPath = "/public/ticker/{symbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicTickerSymbolGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Ticker>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Ticker) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Ticker)));
        }

        /// <summary>
        /// Trades 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="sort">Sort direction (optional, default to DESC)</param>
        /// <param name="by">Filter field (optional, default to timestamp)</param>
        /// <param name="from">If filter by timestamp, then datetime in iso format or timestamp in millisecond otherwise trade id (optional)</param>
        /// <param name="till">If filter by timestamp, then datetime in iso format or timestamp in millisecond otherwise trade id (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>List&lt;PublicTrade&gt;</returns>
        public List<PublicTrade> PublicTradesSymbolGet (string symbol, string sort = null, string by = null, string from = null, string till = null, int? limit = null, int? offset = null)
        {
             ApiResponse<List<PublicTrade>> localVarResponse = PublicTradesSymbolGetWithHttpInfo(symbol, sort, by, from, till, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Trades 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="sort">Sort direction (optional, default to DESC)</param>
        /// <param name="by">Filter field (optional, default to timestamp)</param>
        /// <param name="from">If filter by timestamp, then datetime in iso format or timestamp in millisecond otherwise trade id (optional)</param>
        /// <param name="till">If filter by timestamp, then datetime in iso format or timestamp in millisecond otherwise trade id (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of List&lt;PublicTrade&gt;</returns>
        public ApiResponse< List<PublicTrade> > PublicTradesSymbolGetWithHttpInfo (string symbol, string sort = null, string by = null, string from = null, string till = null, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PublicApi->PublicTradesSymbolGet");

            var localVarPath = "/public/trades/{symbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (by != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "by", by)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (till != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "till", till)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicTradesSymbolGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PublicTrade>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PublicTrade>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PublicTrade>)));
        }

        /// <summary>
        /// Trades 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="sort">Sort direction (optional, default to DESC)</param>
        /// <param name="by">Filter field (optional, default to timestamp)</param>
        /// <param name="from">If filter by timestamp, then datetime in iso format or timestamp in millisecond otherwise trade id (optional)</param>
        /// <param name="till">If filter by timestamp, then datetime in iso format or timestamp in millisecond otherwise trade id (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of List&lt;PublicTrade&gt;</returns>
        public async System.Threading.Tasks.Task<List<PublicTrade>> PublicTradesSymbolGetAsync (string symbol, string sort = null, string by = null, string from = null, string till = null, int? limit = null, int? offset = null)
        {
             ApiResponse<List<PublicTrade>> localVarResponse = await PublicTradesSymbolGetAsyncWithHttpInfo(symbol, sort, by, from, till, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Trades 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="sort">Sort direction (optional, default to DESC)</param>
        /// <param name="by">Filter field (optional, default to timestamp)</param>
        /// <param name="from">If filter by timestamp, then datetime in iso format or timestamp in millisecond otherwise trade id (optional)</param>
        /// <param name="till">If filter by timestamp, then datetime in iso format or timestamp in millisecond otherwise trade id (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PublicTrade&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PublicTrade>>> PublicTradesSymbolGetAsyncWithHttpInfo (string symbol, string sort = null, string by = null, string from = null, string till = null, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PublicApi->PublicTradesSymbolGet");

            var localVarPath = "/public/trades/{symbol}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarPathParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // path parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (by != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "by", by)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (till != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "till", till)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicTradesSymbolGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PublicTrade>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PublicTrade>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PublicTrade>)));
        }

    }
}
