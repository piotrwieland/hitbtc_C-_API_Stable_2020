/* 
 * HitBTC API
 *
 * Create API keys in your profile https://hitbtc.com/settings/api-keys and use public API key as username and secret as password to authorize. 
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TradingFee
    /// </summary>
    [DataContract]
    public partial class TradingFee :  IEquatable<TradingFee>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TradingFee" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TradingFee() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TradingFee" /> class.
        /// </summary>
        /// <param name="takeLiquidityRate">takeLiquidityRate (required).</param>
        /// <param name="provideLiquidityRate">provideLiquidityRate (required).</param>
        public TradingFee(string takeLiquidityRate = default(string), string provideLiquidityRate = default(string))
        {
            // to ensure "takeLiquidityRate" is required (not null)
            if (takeLiquidityRate == null)
            {
                throw new InvalidDataException("takeLiquidityRate is a required property for TradingFee and cannot be null");
            }
            else
            {
                this.TakeLiquidityRate = takeLiquidityRate;
            }
            // to ensure "provideLiquidityRate" is required (not null)
            if (provideLiquidityRate == null)
            {
                throw new InvalidDataException("provideLiquidityRate is a required property for TradingFee and cannot be null");
            }
            else
            {
                this.ProvideLiquidityRate = provideLiquidityRate;
            }
        }
        
        /// <summary>
        /// Gets or Sets TakeLiquidityRate
        /// </summary>
        [DataMember(Name="takeLiquidityRate", EmitDefaultValue=false)]
        public string TakeLiquidityRate { get; set; }

        /// <summary>
        /// Gets or Sets ProvideLiquidityRate
        /// </summary>
        [DataMember(Name="provideLiquidityRate", EmitDefaultValue=false)]
        public string ProvideLiquidityRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TradingFee {\n");
            sb.Append("  TakeLiquidityRate: ").Append(TakeLiquidityRate).Append("\n");
            sb.Append("  ProvideLiquidityRate: ").Append(ProvideLiquidityRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TradingFee);
        }

        /// <summary>
        /// Returns true if TradingFee instances are equal
        /// </summary>
        /// <param name="input">Instance of TradingFee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TradingFee input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TakeLiquidityRate == input.TakeLiquidityRate ||
                    (this.TakeLiquidityRate != null &&
                    this.TakeLiquidityRate.Equals(input.TakeLiquidityRate))
                ) && 
                (
                    this.ProvideLiquidityRate == input.ProvideLiquidityRate ||
                    (this.ProvideLiquidityRate != null &&
                    this.ProvideLiquidityRate.Equals(input.ProvideLiquidityRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TakeLiquidityRate != null)
                    hashCode = hashCode * 59 + this.TakeLiquidityRate.GetHashCode();
                if (this.ProvideLiquidityRate != null)
                    hashCode = hashCode * 59 + this.ProvideLiquidityRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
