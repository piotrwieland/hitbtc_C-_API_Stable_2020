/* 
 * HitBTC API
 *
 * Create API keys in your profile https://hitbtc.com/settings/api-keys and use public API key as username and secret as password to authorize. 
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Ticker
    /// </summary>
    [DataContract]
    public partial class Ticker :  IEquatable<Ticker>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ticker" /> class.
        /// </summary>
        /// <param name="symbol">symbol.</param>
        /// <param name="ask">Best ASK..</param>
        /// <param name="bid">Best BID..</param>
        /// <param name="last">Last trade price.</param>
        /// <param name="low">Min trade price of the last 24 hours..</param>
        /// <param name="high">Max trade price of the last 24 hours..</param>
        /// <param name="open">Trade price 24 hours ago..</param>
        /// <param name="volume">Trading volume in commoduty currency of the last 24 hours..</param>
        /// <param name="volumeQuoute">Trading volume in currency of the last 24 hours..</param>
        /// <param name="timestamp">Actual timestamp..</param>
        public Ticker(string symbol = default(string), string ask = default(string), string bid = default(string), string last = default(string), string low = default(string), string high = default(string), string open = default(string), string volume = default(string), string volumeQuoute = default(string), DateTime? timestamp = default(DateTime?))
        {
            this.Symbol = symbol;
            this.Ask = ask;
            this.Bid = bid;
            this.Last = last;
            this.Low = low;
            this.High = high;
            this.Open = open;
            this.Volume = volume;
            this.VolumeQuoute = volumeQuoute;
            this.Timestamp = timestamp;
        }
        
        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Best ASK.
        /// </summary>
        /// <value>Best ASK.</value>
        [DataMember(Name="ask", EmitDefaultValue=false)]
        public string Ask { get; set; }

        /// <summary>
        /// Best BID.
        /// </summary>
        /// <value>Best BID.</value>
        [DataMember(Name="bid", EmitDefaultValue=false)]
        public string Bid { get; set; }

        /// <summary>
        /// Last trade price
        /// </summary>
        /// <value>Last trade price</value>
        [DataMember(Name="last", EmitDefaultValue=false)]
        public string Last { get; set; }

        /// <summary>
        /// Min trade price of the last 24 hours.
        /// </summary>
        /// <value>Min trade price of the last 24 hours.</value>
        [DataMember(Name="low", EmitDefaultValue=false)]
        public string Low { get; set; }

        /// <summary>
        /// Max trade price of the last 24 hours.
        /// </summary>
        /// <value>Max trade price of the last 24 hours.</value>
        [DataMember(Name="high", EmitDefaultValue=false)]
        public string High { get; set; }

        /// <summary>
        /// Trade price 24 hours ago.
        /// </summary>
        /// <value>Trade price 24 hours ago.</value>
        [DataMember(Name="open", EmitDefaultValue=false)]
        public string Open { get; set; }

        /// <summary>
        /// Trading volume in commoduty currency of the last 24 hours.
        /// </summary>
        /// <value>Trading volume in commoduty currency of the last 24 hours.</value>
        [DataMember(Name="volume", EmitDefaultValue=false)]
        public string Volume { get; set; }

        /// <summary>
        /// Trading volume in currency of the last 24 hours.
        /// </summary>
        /// <value>Trading volume in currency of the last 24 hours.</value>
        [DataMember(Name="volumeQuoute", EmitDefaultValue=false)]
        public string VolumeQuoute { get; set; }

        /// <summary>
        /// Actual timestamp.
        /// </summary>
        /// <value>Actual timestamp.</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ticker {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Ask: ").Append(Ask).Append("\n");
            sb.Append("  Bid: ").Append(Bid).Append("\n");
            sb.Append("  Last: ").Append(Last).Append("\n");
            sb.Append("  Low: ").Append(Low).Append("\n");
            sb.Append("  High: ").Append(High).Append("\n");
            sb.Append("  Open: ").Append(Open).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  VolumeQuoute: ").Append(VolumeQuoute).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Ticker);
        }

        /// <summary>
        /// Returns true if Ticker instances are equal
        /// </summary>
        /// <param name="input">Instance of Ticker to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ticker input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Ask == input.Ask ||
                    (this.Ask != null &&
                    this.Ask.Equals(input.Ask))
                ) && 
                (
                    this.Bid == input.Bid ||
                    (this.Bid != null &&
                    this.Bid.Equals(input.Bid))
                ) && 
                (
                    this.Last == input.Last ||
                    (this.Last != null &&
                    this.Last.Equals(input.Last))
                ) && 
                (
                    this.Low == input.Low ||
                    (this.Low != null &&
                    this.Low.Equals(input.Low))
                ) && 
                (
                    this.High == input.High ||
                    (this.High != null &&
                    this.High.Equals(input.High))
                ) && 
                (
                    this.Open == input.Open ||
                    (this.Open != null &&
                    this.Open.Equals(input.Open))
                ) && 
                (
                    this.Volume == input.Volume ||
                    (this.Volume != null &&
                    this.Volume.Equals(input.Volume))
                ) && 
                (
                    this.VolumeQuoute == input.VolumeQuoute ||
                    (this.VolumeQuoute != null &&
                    this.VolumeQuoute.Equals(input.VolumeQuoute))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.Ask != null)
                    hashCode = hashCode * 59 + this.Ask.GetHashCode();
                if (this.Bid != null)
                    hashCode = hashCode * 59 + this.Bid.GetHashCode();
                if (this.Last != null)
                    hashCode = hashCode * 59 + this.Last.GetHashCode();
                if (this.Low != null)
                    hashCode = hashCode * 59 + this.Low.GetHashCode();
                if (this.High != null)
                    hashCode = hashCode * 59 + this.High.GetHashCode();
                if (this.Open != null)
                    hashCode = hashCode * 59 + this.Open.GetHashCode();
                if (this.Volume != null)
                    hashCode = hashCode * 59 + this.Volume.GetHashCode();
                if (this.VolumeQuoute != null)
                    hashCode = hashCode * 59 + this.VolumeQuoute.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
