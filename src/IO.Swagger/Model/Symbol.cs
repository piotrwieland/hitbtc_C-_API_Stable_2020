/* 
 * HitBTC API
 *
 * Create API keys in your profile https://hitbtc.com/settings/api-keys and use public API key as username and secret as password to authorize. 
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Symbol
    /// </summary>
    [DataContract]
    public partial class Symbol :  IEquatable<Symbol>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Symbol" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Symbol() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Symbol" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="baseCurrency">baseCurrency (required).</param>
        /// <param name="quoteCurrency">quoteCurrency (required).</param>
        /// <param name="quantityIncrement">quantityIncrement (required).</param>
        /// <param name="tickSize">A tick size is the minimum price movement of a trading instrument. (required).</param>
        /// <param name="takeLiquidityRate">takeLiquidityRate.</param>
        /// <param name="provideLiquidityRate">provideLiquidityRate.</param>
        /// <param name="feeCurrency">feeCurrency.</param>
        public Symbol(string id = default(string), string baseCurrency = default(string), string quoteCurrency = default(string), string quantityIncrement = default(string), string tickSize = default(string), string takeLiquidityRate = default(string), string provideLiquidityRate = default(string), string feeCurrency = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Symbol and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "baseCurrency" is required (not null)
            if (baseCurrency == null)
            {
                throw new InvalidDataException("baseCurrency is a required property for Symbol and cannot be null");
            }
            else
            {
                this.BaseCurrency = baseCurrency;
            }
            // to ensure "quoteCurrency" is required (not null)
            if (quoteCurrency == null)
            {
                throw new InvalidDataException("quoteCurrency is a required property for Symbol and cannot be null");
            }
            else
            {
                this.QuoteCurrency = quoteCurrency;
            }
            // to ensure "quantityIncrement" is required (not null)
            if (quantityIncrement == null)
            {
                throw new InvalidDataException("quantityIncrement is a required property for Symbol and cannot be null");
            }
            else
            {
                this.QuantityIncrement = quantityIncrement;
            }
            // to ensure "tickSize" is required (not null)
            if (tickSize == null)
            {
                throw new InvalidDataException("tickSize is a required property for Symbol and cannot be null");
            }
            else
            {
                this.TickSize = tickSize;
            }
            this.TakeLiquidityRate = takeLiquidityRate;
            this.ProvideLiquidityRate = provideLiquidityRate;
            this.FeeCurrency = feeCurrency;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets BaseCurrency
        /// </summary>
        [DataMember(Name="baseCurrency", EmitDefaultValue=false)]
        public string BaseCurrency { get; set; }

        /// <summary>
        /// Gets or Sets QuoteCurrency
        /// </summary>
        [DataMember(Name="quoteCurrency", EmitDefaultValue=false)]
        public string QuoteCurrency { get; set; }

        /// <summary>
        /// Gets or Sets QuantityIncrement
        /// </summary>
        [DataMember(Name="quantityIncrement", EmitDefaultValue=false)]
        public string QuantityIncrement { get; set; }

        /// <summary>
        /// A tick size is the minimum price movement of a trading instrument.
        /// </summary>
        /// <value>A tick size is the minimum price movement of a trading instrument.</value>
        [DataMember(Name="tickSize", EmitDefaultValue=false)]
        public string TickSize { get; set; }

        /// <summary>
        /// Gets or Sets TakeLiquidityRate
        /// </summary>
        [DataMember(Name="takeLiquidityRate", EmitDefaultValue=false)]
        public string TakeLiquidityRate { get; set; }

        /// <summary>
        /// Gets or Sets ProvideLiquidityRate
        /// </summary>
        [DataMember(Name="provideLiquidityRate", EmitDefaultValue=false)]
        public string ProvideLiquidityRate { get; set; }

        /// <summary>
        /// Gets or Sets FeeCurrency
        /// </summary>
        [DataMember(Name="feeCurrency", EmitDefaultValue=false)]
        public string FeeCurrency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Symbol {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BaseCurrency: ").Append(BaseCurrency).Append("\n");
            sb.Append("  QuoteCurrency: ").Append(QuoteCurrency).Append("\n");
            sb.Append("  QuantityIncrement: ").Append(QuantityIncrement).Append("\n");
            sb.Append("  TickSize: ").Append(TickSize).Append("\n");
            sb.Append("  TakeLiquidityRate: ").Append(TakeLiquidityRate).Append("\n");
            sb.Append("  ProvideLiquidityRate: ").Append(ProvideLiquidityRate).Append("\n");
            sb.Append("  FeeCurrency: ").Append(FeeCurrency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Symbol);
        }

        /// <summary>
        /// Returns true if Symbol instances are equal
        /// </summary>
        /// <param name="input">Instance of Symbol to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Symbol input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.BaseCurrency == input.BaseCurrency ||
                    (this.BaseCurrency != null &&
                    this.BaseCurrency.Equals(input.BaseCurrency))
                ) && 
                (
                    this.QuoteCurrency == input.QuoteCurrency ||
                    (this.QuoteCurrency != null &&
                    this.QuoteCurrency.Equals(input.QuoteCurrency))
                ) && 
                (
                    this.QuantityIncrement == input.QuantityIncrement ||
                    (this.QuantityIncrement != null &&
                    this.QuantityIncrement.Equals(input.QuantityIncrement))
                ) && 
                (
                    this.TickSize == input.TickSize ||
                    (this.TickSize != null &&
                    this.TickSize.Equals(input.TickSize))
                ) && 
                (
                    this.TakeLiquidityRate == input.TakeLiquidityRate ||
                    (this.TakeLiquidityRate != null &&
                    this.TakeLiquidityRate.Equals(input.TakeLiquidityRate))
                ) && 
                (
                    this.ProvideLiquidityRate == input.ProvideLiquidityRate ||
                    (this.ProvideLiquidityRate != null &&
                    this.ProvideLiquidityRate.Equals(input.ProvideLiquidityRate))
                ) && 
                (
                    this.FeeCurrency == input.FeeCurrency ||
                    (this.FeeCurrency != null &&
                    this.FeeCurrency.Equals(input.FeeCurrency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.BaseCurrency != null)
                    hashCode = hashCode * 59 + this.BaseCurrency.GetHashCode();
                if (this.QuoteCurrency != null)
                    hashCode = hashCode * 59 + this.QuoteCurrency.GetHashCode();
                if (this.QuantityIncrement != null)
                    hashCode = hashCode * 59 + this.QuantityIncrement.GetHashCode();
                if (this.TickSize != null)
                    hashCode = hashCode * 59 + this.TickSize.GetHashCode();
                if (this.TakeLiquidityRate != null)
                    hashCode = hashCode * 59 + this.TakeLiquidityRate.GetHashCode();
                if (this.ProvideLiquidityRate != null)
                    hashCode = hashCode * 59 + this.ProvideLiquidityRate.GetHashCode();
                if (this.FeeCurrency != null)
                    hashCode = hashCode * 59 + this.FeeCurrency.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
